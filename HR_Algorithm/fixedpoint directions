

Consider a MATLAB function that calculates the square root of a fixed-point number:
%#codegen
function y = sqrtfi(x)
y = sqrt(x);


To specify the properties of the primary fixed-point input x by example on the MATLAB command line, follow these steps:

Define the numerictype properties for x, as in this example:
T = numerictype('WordLength',32,
                'FractionLength',23,
                'Signed',true);


Define the fimath properties for x, as in this example:
F = fimath('SumMode','SpecifyPrecision',
           'SumWordLength',32,
           'SumFractionLength',23,
           'ProductMode','SpecifyPrecision',
           'ProductWordLength',32,
           'ProductFractionLength',23);


Create a fixed-point variable with the numerictype and fimath properties you just defined, as in this example:
myeg = { fi(4.0,T,F) };


Compile the function sqrtfi using the codegen command, passing the variable myeg as the argument to the -args option, as in this example:
codegen sqrtfi -args myeg;






Specify Any Class.  
assert ( isa ( param, 'class_name') )


Sets the input parameter param to the MATLAB class class_name. For example, to set the class of input U to a 32-bit signed integer, call:
... 
assert(isa(U,'int32'));
...


If you set the class of an input parameter to fi, you must also set its numerictype, see Specify numerictype of Fixed-Point Input. You can also set its fimath properties, see Specify fimath of Fixed-Point Input. If you do not set the fimath properties, codegen uses the MATLAB default fimath value.

If you set the class of an input parameter to struct, you must specify the properties of all fields in the order that they appear in the structure definition.